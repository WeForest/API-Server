generator client {
  provider      = "prisma-client-js"
  binaryTargets = ["native", "rhel-openssl-1.0.x"]
}

datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
}

model GoalExp {
  level          Int    @id @default(autoincrement())
  tier           String
  GoalExperience Int
}

model User {
  id           Int      @id @default(autoincrement())
  email        String   @unique
  sub          String   @unique
  name         String
  profileImg   String?
  isJobSeeker  Boolean  @default(true)
  companyEmail String?
  authCompany  Boolean?
  purpose      String?
  level        Int      @default(1)
  exp          Int      @default(0)
  accessToken  String?

  followers   User[]        @relation("FollowRelation", references: [id])
  following   User[]        @relation("FollowRelation", references: [id])
  major       Major[]       @relation(references: [id])
  interested  Interests[]   @relation(references: [id])
  group       StudyGroup[]  @relation(references: [id])
  ChattingLog ChattingLog[]
  HasMission  HasMission[]
  StudyGroup  StudyGroup[]  @relation("GroupOwner")
  chatting    ChattingParticipant[]  
}

model StudyGroup {
  id          Int    @id @default(autoincrement())
  name        String
  description String
  tags        String
  owner       User   @relation("GroupOwner", fields: [ownerId], references: [id])
  ownerId     Int
  users       User[] @relation(references: [id])
}

model Interests {
  id         Int    @id @default(autoincrement())
  Interested String @unique
  users      User[] @relation(references: [id])
}

model Major {
  id    Int    @id @default(autoincrement())
  major String @unique
  users User[] @relation(references: [id])
}

model Mission {
  id         Int          @id @default(autoincrement())
  level      String       @default("low") // low, middle , high
  exp        Int
  title      String
  content    String
  createdAt  DateTime     @default(now())
  expiredAt  Int
  type       String       @default("daily") // daily, weekly, monthly 
  HasMission HasMission[]
}

model HasMission {
  id Int @id @default(autoincrement())

  user   User @relation(fields: [userId], references: [id])
  userId Int

  mission   Mission @relation(fields: [missionId], references: [id])
  missionId Int
}

model Chatting {
  id          Int           @id @default(autoincrement())
  name        String?       @unique
  type        String        @default("dm") // dm, study
  ChattingLog ChattingLog[]
  chatting    ChattingParticipant[]  
}

model ChattingParticipant{
  id Int @id @default(autoincrement())
  participant User[]  @relation(fields: [userId], references: [id])
  userId  Int
  chatting Chatting[] @relation(fields: [chattingId], references: [id])
  chattingId  Int
}

model ChattingLog {
  id         Int      @id @default(autoincrement())
  content    String
  createdAt  DateTime @default(now())
  user       User     @relation(fields: [userId], references: [id])
  userId     Int
  chatting   Chatting @relation(fields: [chattingId], references: [id])
  chattingId Int
}
