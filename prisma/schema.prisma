generator client {
  provider      = "prisma-client-js"
  binaryTargets = ["native", "rhel-openssl-1.0.x"]
}

datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
}

model GoalExp {
  level          Int @id @default(autoincrement())
  GoalExperience Int
}

model User {
  id           Int           @id @default(autoincrement())
  email        String        @unique
  sub          String        @unique
  name         String
  isJobSeeker  Boolean       @default(true)
  companyEmail String?
  authCompany  Boolean?
  purpose      String
  level        Int
  exp          Int
  followers    User[]        @relation("FollowRelation", references: [id])
  following    User[]        @relation("FollowRelation", references: [id])
  major        Major[]       @relation(references: [id])
  interested   Interests[]   @relation(references: [id])
  group        StudyGroup[]  @relation(references: [id])
  ChattingLog  ChattingLog[]
}

model StudyGroup {
  id    Int    @id @default(autoincrement())
  name  String
  users User[] @relation(references: [id])
}

model Interests {
  id         Int    @id @default(autoincrement())
  Interested String @unique
  users      User[] @relation(references: [id])
}

model Major {
  id    Int    @id @default(autoincrement())
  major String @unique
  users User[] @relation(references: [id])
}

model Mission {
  id        Int          @id @default(autoincrement())
  level     Int
  exp       Int
  title     String
  content   String
  createdAt DateTime     @default(now())
  expiredAt DateTime
  type      MissionType?
}

model MissionType {
  id        Int     @id @default(autoincrement())
  type      String  @default("daily") // daily, weekly, monthly 
  mission   Mission @relation(fields: [missionId], references: [id])
  missionId Int     @unique
}

model Chatting {
  id          Int           @id @default(autoincrement())
  type        ChattingType?
  ChattingLog ChattingLog[]
}

model ChattingLog {
  id         Int      @id @default(autoincrement())
  content    String
  createdAt  DateTime @default(now())
  user       User     @relation(fields: [userId], references: [id])
  userId     Int
  chatting   Chatting @relation(fields: [chattingId], references: [id])
  chattingId Int
}

model ChattingType {
  id         Int      @id @default(autoincrement())
  type       String   @default("dm") // dm, study
  chatting   Chatting @relation(fields: [chattingId], references: [id])
  chattingId Int      @unique
}
